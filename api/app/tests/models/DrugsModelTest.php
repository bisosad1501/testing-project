<?php
/**
 * L·ªõp ki·ªÉm th·ª≠ DrugsModel
 *
 * File: api/app/tests/models/DrugsModelTest.php
 * Class: DrugsModelTest
 *
 * M√¥ t·∫£: Ki·ªÉm th·ª≠ ƒë·∫ßy ƒë·ªß c√°c ch·ª©c nƒÉng c·ªßa l·ªõp DrugsModel, bao g·ªìm:
 * - Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng
 * - Ph√¢n trang d·ªØ li·ªáu
 * - T√¨m ki·∫øm d·ªØ li·ªáu
 * - L·ªçc d·ªØ li·ªáu
 * - S·∫Øp x·∫øp d·ªØ li·ªáu
 *
 * Phi√™n b·∫£n n√†y s·ª≠ d·ª•ng tr·ª±c ti·∫øp b·∫£ng trong c∆° s·ªü d·ªØ li·ªáu test thay v√¨ t·∫°o b·∫£ng t·∫°m th·ªùi.
 *
 * @package    UnitTest
 * @subpackage Models
 * @author     B21DCDT205-L√™ ƒê·ª©c Th·∫Øng
 * @version    1.0
 */
require_once __DIR__ . '/../DatabaseTestCase.php';

class DrugsModelTest extends DatabaseTestCase
{
    /**
     * @var DrugsModel ƒê·ªëi t∆∞·ª£ng model danh s√°ch thu·ªëc d√πng trong test
     */
    protected $drugsModel;

    /**
     * @var array L∆∞u tr·ªØ k·∫øt qu·∫£ c·ªßa t·∫•t c·∫£ c√°c test
     */
    protected static $allTestResults = [];

    /**
     * @var string Nh√≥m test hi·ªán t·∫°i
     */
    protected $currentGroup;

    /**
     * @var float Th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu test
     */
    protected static $startTime;

    /**
     * @var bool Ki·ªÉm so√°t vi·ªác b·∫Øt ƒë·∫ßu/k·∫øt th√∫c transaction
     */
    protected $useTransaction = true;

    /**
     * Thi·∫øt l·∫≠p tr∆∞·ªõc m·ªói test case
     * Kh·ªüi t·∫°o DrugsModel v√† ghi l·∫°i th·ªùi gian b·∫Øt ƒë·∫ßu
     */
    protected function setUp()
    {
        parent::setUp();
        require_once APP_PATH . '/models/DrugsModel.php';
        $this->drugsModel = new DrugsModel();

        if (!isset(self::$startTime)) {
            self::$startTime = microtime(true);
        }

        // T√™n b·∫£ng ƒë·∫ßy ƒë·ªß v·ªõi prefix
        $fullTableName = TABLE_PREFIX.TABLE_DRUGS;

        // X√≥a d·ªØ li·ªáu c≈© t·ª´ b·∫£ng test (n·∫øu c√≥)
        $this->executeQuery("TRUNCATE TABLE `{$fullTableName}`");
    }

    /**
     * Ghi log ti√™u ƒë·ªÅ ph·∫ßn test
     *
     * @param string $title Ti√™u ƒë·ªÅ ph·∫ßn test
     */
    private function logSection($title)
    {
        $this->currentGroup = $title;
        fwrite(STDOUT, "\n" . str_repeat("=", 50) . "\n");
        fwrite(STDOUT, "üîç {$title}\n");
        fwrite(STDOUT, str_repeat("=", 50) . "\n");
    }

    /**
     * Ghi log b∆∞·ªõc test
     *
     * @param string $description M√¥ t·∫£ b∆∞·ªõc test
     * @param string|null $expected K·∫øt qu·∫£ mong ƒë·ª£i
     */
    private function logStep($description, $expected = null)
    {
        fwrite(STDOUT, "\nüìã {$description}\n");
        if ($expected) {
            fwrite(STDOUT, "  Expected: {$expected}\n");
        }
    }

    /**
     * Ghi log k·∫øt qu·∫£ test
     *
     * @param bool $success K·∫øt qu·∫£ test (true/false)
     * @param string $actual K·∫øt qu·∫£ th·ª±c t·∫ø
     * @param string|null $error Th√¥ng b√°o l·ªói (n·∫øu c√≥)
     */
    private function logResult($success, $actual, $error = null)
    {
        self::$allTestResults[] = [
            'group' => $this->currentGroup,
            'success' => $success,
            'actual' => $actual,
            'error' => $error
        ];

        $icon = $success ? "‚úÖ" : "‚ùå";
        $status = $success ? "SUCCESS" : "FAILED";

        fwrite(STDOUT, "  Result: {$actual}\n");
        fwrite(STDOUT, "  Status: {$icon} {$status}" .
            ($error ? " - {$error}" : "") . "\n");
    }

    /**
     * T·∫°o d·ªØ li·ªáu thu·ªëc m·∫´u cho test
     *
     * @param array $override D·ªØ li·ªáu ghi ƒë√®
     * @return array D·ªØ li·ªáu thu·ªëc m·∫´u
     */
    private function createTestDrug($override = [])
    {
        $timestamp = time();
        return array_merge([
            'name' => 'Drug_' . $timestamp
        ], $override);
    }

    /**
     * T·∫°o nhi·ªÅu thu·ªëc m·∫´u cho test
     *
     * @param int $count S·ªë l∆∞·ª£ng thu·ªëc c·∫ßn t·∫°o
     * @return array M·∫£ng c√°c ID c·ªßa thu·ªëc ƒë√£ t·∫°o
     */
    private function createMultipleTestDrugs($count = 10)
    {
        $tableName = TABLE_PREFIX.TABLE_DRUGS;
        $ids = [];

        for ($i = 0; $i < $count; $i++) {
            $drugData = $this->createTestDrug([
                'name' => 'Drug_Test_' . $i . '_' . time()
            ]);

            $columns = implode(', ', array_keys($drugData));
            $placeholders = implode(', ', array_fill(0, count($drugData), '?'));

            $sql = "INSERT INTO `{$tableName}` ({$columns}) VALUES ({$placeholders})";

            $stmt = $this->pdo->prepare($sql);
            $stmt->execute(array_values($drugData));

            $ids[] = $this->pdo->lastInsertId();
        }

        return $ids;
    }

    /**
     * Test case TC-01: Ki·ªÉm tra kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng DrugsModel
     * Test case DRUGS_CONS_01: Ki·ªÉm tra kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng DrugsModel
     */
    public function testConstructor()
    {
        $this->logSection("DRUGS_CONS_01: Ki·ªÉm tra kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng");
        $this->logStep("Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng DrugsModel", "ƒê·ªëi t∆∞·ª£ng ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng");

        // Ki·ªÉm tra ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c kh·ªüi t·∫°o
        $isInstanceOfDrugs = $this->drugsModel instanceof DrugsModel;
        $isInstanceOfDataList = $this->drugsModel instanceof DataList;

        $this->logResult($isInstanceOfDrugs && $isInstanceOfDataList,
            "Instance created: " . ($isInstanceOfDrugs ? "Yes" : "No") .
            ", Extends DataList: " . ($isInstanceOfDataList ? "Yes" : "No"));

        $this->assertInstanceOf(DrugsModel::class, $this->drugsModel);
        $this->assertInstanceOf(DataList::class, $this->drugsModel);

        // Ki·ªÉm tra query ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p
        $query = $this->drugsModel->getQuery();
        $hasQuery = !is_null($query);

        $this->logResult($hasQuery,
            "Query initialized: " . ($hasQuery ? "Yes" : "No"));

        $this->assertNotNull($query);
    }

    /**
     * Test case TC-02: Ki·ªÉm tra ph∆∞∆°ng th·ª©c fetchData
     * Test case DRUGS_FETCH_02: Ki·ªÉm tra ph∆∞∆°ng th·ª©c fetchData
     */
    public function testFetchData()
    {
        $this->logSection("DRUGS_FETCH_02: Ki·ªÉm tra ph∆∞∆°ng th·ª©c fetchData");
        $this->logStep("T·∫°o d·ªØ li·ªáu test v√† l·∫•y danh s√°ch thu·ªëc", "Danh s√°ch thu·ªëc ƒë∆∞·ª£c l·∫•y th√†nh c√¥ng");

        // T·∫°o d·ªØ li·ªáu test
        $drugIds = $this->createMultipleTestDrugs(5);
        $this->assertCount(5, $drugIds);

        // L·∫•y danh s√°ch thu·ªëc
        $this->drugsModel->fetchData();
        $data = $this->drugsModel->getData();

        // Ki·ªÉm tra k·∫øt qu·∫£
        $dataCount = count($data);
        $hasData = $dataCount > 0;

        $this->logResult($hasData,
            "Data fetched: " . ($hasData ? "Yes" : "No") .
            ", Record count: " . $dataCount);

        $this->assertTrue($hasData);
        $this->assertEquals(5, $dataCount);
    }

    /**
     * Test case TC-03: Ki·ªÉm tra ph∆∞∆°ng th·ª©c paginate
     * Test case DRUGS_PAGE_03: Ki·ªÉm tra ph∆∞∆°ng th·ª©c paginate
     */
    public function testPaginate()
    {
        $this->logSection("DRUGS_PAGE_03: Ki·ªÉm tra ph∆∞∆°ng th·ª©c paginate");
        $this->logStep("T·∫°o d·ªØ li·ªáu test v√† ph√¢n trang", "D·ªØ li·ªáu ƒë∆∞·ª£c ph√¢n trang th√†nh c√¥ng");

        // T·∫°o d·ªØ li·ªáu test
        $drugIds = $this->createMultipleTestDrugs(10);
        $this->assertCount(10, $drugIds);

        // Thi·∫øt l·∫≠p ph√¢n trang
        $this->drugsModel->setPageSize(3);
        $this->drugsModel->setPage(2);

        // L·∫•y danh s√°ch thu·ªëc
        $this->drugsModel->fetchData();
        $data = $this->drugsModel->getData();

        // Ki·ªÉm tra k·∫øt qu·∫£
        $dataCount = count($data);
        $totalCount = $this->drugsModel->getTotalCount();
        $pageCount = $this->drugsModel->getPageCount();
        $currentPage = $this->drugsModel->getPage();

        // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu kh√¥ng
        $hasData = $dataCount > 0;

        $this->logResult($hasData,
            "Pagination successful: " .
            "Items on page: " . $dataCount . ", " .
            "Total items: " . $totalCount . ", " .
            "Total pages: " . $pageCount . ", " .
            "Current page: " . $currentPage);

        $this->assertTrue($hasData);
        $this->assertGreaterThan(0, $totalCount);
        $this->assertGreaterThan(0, $pageCount);
        $this->assertEquals(2, $currentPage);
    }

    /**
     * Test case TC-04: Ki·ªÉm tra ph∆∞∆°ng th·ª©c getData
     * Test case DRUGS_DATA_04: Ki·ªÉm tra ph∆∞∆°ng th·ª©c getData
     */
    public function testGetData()
    {
        $this->logSection("DRUGS_DATA_04: Ki·ªÉm tra ph∆∞∆°ng th·ª©c getData");
        $this->logStep("L·∫•y d·ªØ li·ªáu t·ª´ model", "D·ªØ li·ªáu ƒë∆∞·ª£c l·∫•y th√†nh c√¥ng");

        // T·∫°o d·ªØ li·ªáu test
        $drugIds = $this->createMultipleTestDrugs(3);
        $this->assertCount(3, $drugIds);

        // L·∫•y danh s√°ch thu·ªëc
        $this->drugsModel->fetchData();
        $data = $this->drugsModel->getData();

        // Ki·ªÉm tra k·∫øt qu·∫£
        $dataCount = count($data);
        $hasData = $dataCount > 0;
        $hasCorrectFields = false;

        if ($hasData) {
            $record = $data[0];
            $hasCorrectFields = isset($record->name);
        }

        $this->logResult($hasData && $hasCorrectFields,
            "Data retrieved: " . ($hasData ? "Yes" : "No") .
            ", Record count: " . $dataCount .
            ", Has correct fields: " . ($hasCorrectFields ? "Yes" : "No"));

        $this->assertTrue($hasData);
        $this->assertTrue($hasCorrectFields);
        $this->assertEquals(3, $dataCount);
    }

    /**
     * Test case TC-05: Ki·ªÉm tra ph∆∞∆°ng th·ª©c where
     * Test case DRUGS_WHERE_05: Ki·ªÉm tra ph∆∞∆°ng th·ª©c where
     */
    public function testWhere()
    {
        $this->logSection("DRUGS_WHERE_05: Ki·ªÉm tra ph∆∞∆°ng th·ª©c where");
        $this->logStep("L·ªçc d·ªØ li·ªáu theo t√™n thu·ªëc", "D·ªØ li·ªáu ƒë∆∞·ª£c l·ªçc th√†nh c√¥ng");

        // T·∫°o d·ªØ li·ªáu test
        $specialName = "SpecialDrug_" . rand(1000, 9999);

        // T·∫°o 5 thu·ªëc th√¥ng th∆∞·ªùng
        $this->createMultipleTestDrugs(5);

        // T·∫°o 3 thu·ªëc v·ªõi t√™n ƒë·∫∑c bi·ªát
        for ($i = 0; $i < 3; $i++) {
            $drugData = $this->createTestDrug([
                'name' => $specialName . '_' . $i
            ]);

            $tableName = TABLE_PREFIX.TABLE_DRUGS;

            $columns = implode(', ', array_keys($drugData));
            $placeholders = implode(', ', array_fill(0, count($drugData), '?'));

            $sql = "INSERT INTO `{$tableName}` ({$columns}) VALUES ({$placeholders})";

            $stmt = $this->pdo->prepare($sql);
            $stmt->execute(array_values($drugData));
        }

        // L·ªçc d·ªØ li·ªáu theo t√™n thu·ªëc
        $this->drugsModel->where("name", "LIKE", $specialName . '%');
        $this->drugsModel->fetchData();
        $data = $this->drugsModel->getData();

        // Ki·ªÉm tra k·∫øt qu·∫£
        $dataCount = count($data);
        $allMatch = true;

        foreach ($data as $record) {
            if (strpos($record->name, $specialName) !== 0) {
                $allMatch = false;
                break;
            }
        }

        $this->logResult($allMatch && $dataCount === 3,
            "Filtering successful: " . ($allMatch ? "Yes" : "No") .
            ", Filtered record count: " . $dataCount . " (expected: 3)");

        $this->assertTrue($allMatch);
        $this->assertEquals(3, $dataCount);
    }

    /**
     * Test case TC-06: Ki·ªÉm tra ph∆∞∆°ng th·ª©c orderBy
     * Test case DRUGS_ORDER_06: Ki·ªÉm tra ph∆∞∆°ng th·ª©c orderBy
     */
    public function testOrderBy()
    {
        $this->logSection("DRUGS_ORDER_06: Ki·ªÉm tra ph∆∞∆°ng th·ª©c orderBy");
        $this->logStep("S·∫Øp x·∫øp d·ªØ li·ªáu theo ID", "D·ªØ li·ªáu ƒë∆∞·ª£c s·∫Øp x·∫øp th√†nh c√¥ng");

        // T·∫°o d·ªØ li·ªáu test
        $drugIds = $this->createMultipleTestDrugs(5);
        $this->assertCount(5, $drugIds);

        // S·∫Øp x·∫øp d·ªØ li·ªáu theo ID gi·∫£m d·∫ßn
        $this->drugsModel->orderBy("id", "DESC");
        $this->drugsModel->fetchData();
        $data = $this->drugsModel->getData();

        // Ki·ªÉm tra k·∫øt qu·∫£
        $dataCount = count($data);
        $isDescending = true;

        for ($i = 0; $i < $dataCount - 1; $i++) {
            if ($data[$i]->id < $data[$i + 1]->id) {
                $isDescending = false;
                break;
            }
        }

        $this->logResult($isDescending && $dataCount === 5,
            "Ordering successful: " . ($isDescending ? "Yes" : "No") .
            ", Order: Descending, Record count: " . $dataCount);

        $this->assertTrue($isDescending);
        $this->assertEquals(5, $dataCount);
    }

    /**
     * Test case TC-07: Ki·ªÉm tra ph∆∞∆°ng th·ª©c search
     * Test case DRUGS_SEARCH_07: Ki·ªÉm tra ph∆∞∆°ng th·ª©c search
     *
     * L∆∞u √Ω: Ph∆∞∆°ng th·ª©c search trong DataList kh√¥ng th·ª±c hi·ªán t√¨m ki·∫øm tr·ª±c ti·∫øp
     * m√† ch·ªâ l∆∞u tr·ªØ t·ª´ kh√≥a t√¨m ki·∫øm. C√°c l·ªõp con ph·∫£i ghi ƒë√® ph∆∞∆°ng th·ª©c n√†y
     * ƒë·ªÉ th·ª±c hi·ªán t√¨m ki·∫øm th·ª±c t·∫ø. V√¨ DrugsModel kh√¥ng ghi ƒë√® ph∆∞∆°ng th·ª©c n√†y,
     * n√™n ch√∫ng ta ch·ªâ ki·ªÉm tra xem t·ª´ kh√≥a t√¨m ki·∫øm c√≥ ƒë∆∞·ª£c l∆∞u tr·ªØ ƒë√∫ng kh√¥ng.
     */
    public function testSearch()
    {
        $this->logSection("DRUGS_SEARCH_07: Ki·ªÉm tra ph∆∞∆°ng th·ª©c search");
        $this->logStep("Ki·ªÉm tra l∆∞u tr·ªØ t·ª´ kh√≥a t√¨m ki·∫øm", "T·ª´ kh√≥a t√¨m ki·∫øm ƒë∆∞·ª£c l∆∞u tr·ªØ th√†nh c√¥ng");

        // T·∫°o t·ª´ kh√≥a t√¨m ki·∫øm
        $searchKeyword = "UNIQUE_KEYWORD";

        // G·ªçi ph∆∞∆°ng th·ª©c search
        $this->drugsModel->search($searchKeyword);

        // Ki·ªÉm tra xem t·ª´ kh√≥a t√¨m ki·∫øm c√≥ ƒë∆∞·ª£c l∆∞u tr·ªØ kh√¥ng
        $storedKeyword = $this->drugsModel->getSearchQuery();
        $searchPerformed = $this->drugsModel->isSearchPerformed();

        $keywordMatches = $storedKeyword === $searchKeyword;

        $this->logResult($keywordMatches && $searchPerformed,
            "Search keyword stored: " . ($keywordMatches ? "Yes" : "No") .
            ", Search performed: " . ($searchPerformed ? "Yes" : "No") .
            ", Stored keyword: " . $storedKeyword);

        $this->assertEquals($searchKeyword, $storedKeyword);
        $this->assertTrue($searchPerformed);
    }

    /**
     * Test case TC-08: Ki·ªÉm tra schema c·ªßa b·∫£ng
     * Test case DRUGS_SCHEMA_08: Ki·ªÉm tra schema c·ªßa b·∫£ng
     *
     * L∆∞u √Ω: Test case n√†y ch·ªâ c√≥ th·ªÉ th·ª±c hi·ªán khi s·ª≠ d·ª•ng b·∫£ng th·∫≠t trong c∆° s·ªü d·ªØ li·ªáu test,
     * kh√¥ng th·ªÉ th·ª±c hi·ªán khi s·ª≠ d·ª•ng b·∫£ng t·∫°m th·ªùi.
     */
    public function testTableSchema()
    {
        $this->logSection("DRUGS_SCHEMA_08: Ki·ªÉm tra schema c·ªßa b·∫£ng");
        $this->logStep("Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng DRUGS", "B·∫£ng c√≥ ƒë√∫ng c·∫•u tr√∫c");

        $tableName = TABLE_PREFIX.TABLE_DRUGS;

        // L·∫•y th√¥ng tin v·ªÅ c√°c c·ªôt trong b·∫£ng
        $sql = "DESCRIBE `{$tableName}`";
        $columns = $this->executeQuery($sql);

        // Ki·ªÉm tra s·ªë l∆∞·ª£ng c·ªôt
        $columnCount = count($columns);

        // Ki·ªÉm tra c√°c c·ªôt c·∫ßn thi·∫øt
        $hasIdColumn = false;
        $hasNameColumn = false;

        foreach ($columns as $column) {
            if ($column['Field'] === 'id') {
                $hasIdColumn = true;
                // Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu v√† thu·ªôc t√≠nh c·ªßa c·ªôt id
                $isAutoIncrement = strpos($column['Extra'], 'auto_increment') !== false;
                $isPrimaryKey = $column['Key'] === 'PRI';
                $this->logResult($isAutoIncrement && $isPrimaryKey,
                    "ID column: Auto Increment = " . ($isAutoIncrement ? "Yes" : "No") .
                    ", Primary Key = " . ($isPrimaryKey ? "Yes" : "No"));
            }

            if ($column['Field'] === 'name') {
                $hasNameColumn = true;
                // Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu c·ªßa c·ªôt name
                $isVarchar = strpos($column['Type'], 'varchar') !== false;
                $isNotNull = $column['Null'] === 'NO';
                $this->logResult($isVarchar && $isNotNull,
                    "Name column: Varchar = " . ($isVarchar ? "Yes" : "No") .
                    ", Not Null = " . ($isNotNull ? "Yes" : "No"));
            }
        }

        $this->logResult($hasIdColumn && $hasNameColumn,
            "Table schema: Column count = " . $columnCount .
            ", Has ID column = " . ($hasIdColumn ? "Yes" : "No") .
            ", Has Name column = " . ($hasNameColumn ? "Yes" : "No"));

        $this->assertTrue($hasIdColumn);
        $this->assertTrue($hasNameColumn);
    }

    /**
     * D·ªçn d·∫πp sau khi t·∫•t c·∫£ c√°c test ƒë∆∞·ª£c ch·∫°y xong
     */
    protected function tearDown()
    {
        // In t·ªïng k·∫øt n·∫øu l√† test cu·ªëi c√πng
        $reflection = new ReflectionClass($this);
        $currentTest = $this->getName();
        $methods = $reflection->getMethods(ReflectionMethod::IS_PUBLIC);

        $testMethods = array_filter($methods, function($method) {
            return strpos($method->name, 'test') === 0;
        });

        $lastMethod = end($testMethods);
        if ($currentTest === $lastMethod->name) {
            $this->printFinalSummary();
        }

        if ($this->useTransaction) {
            parent::tearDown();
        }
    }

    /**
     * In t·ªïng k·∫øt cu·ªëi c√πng sau khi t·∫•t c·∫£ c√°c test ho√†n th√†nh
     */
    private function printFinalSummary()
    {
        // ƒê·∫øm s·ªë l∆∞·ª£ng test case d·ª±a tr√™n c√°c ph∆∞∆°ng th·ª©c test
        $reflection = new ReflectionClass($this);
        $testMethods = array_filter($reflection->getMethods(ReflectionMethod::IS_PUBLIC), function($method) {
            return strpos($method->name, 'test') === 0;
        });
        $totalTestCases = count($testMethods);

        // Nh√≥m k·∫øt qu·∫£ theo test case
        $testResults = [];
        foreach (self::$allTestResults as $result) {
            $group = $result['group'];
            if (!isset($testResults[$group])) {
                $testResults[$group] = [
                    'success' => true,
                    'results' => []
                ];
            }

            $testResults[$group]['results'][] = $result;

            // N·∫øu c√≥ b·∫•t k·ª≥ k·∫øt qu·∫£ n√†o th·∫•t b·∫°i, ƒë√°nh d·∫•u test case l√† th·∫•t b·∫°i
            if (!$result['success']) {
                $testResults[$group]['success'] = false;
            }
        }

        // ƒê·∫øm s·ªë l∆∞·ª£ng test case th√†nh c√¥ng/th·∫•t b·∫°i
        $passedTestCases = count(array_filter($testResults, function($result) {
            return $result['success'];
        }));
        $failedTestCases = count($testResults) - $passedTestCases;

        $executionTime = round(microtime(true) - self::$startTime, 2);

        fwrite(STDOUT, "\n" . str_repeat("=", 50) . "\n");
        fwrite(STDOUT, "üìä T·ªîNG K·∫æT KI·ªÇM TH·ª¨ DRUGSMODEL\n");
        fwrite(STDOUT, str_repeat("=", 50) . "\n");

        fwrite(STDOUT, "T·ªïng s·ªë test case: {$totalTestCases}\n");
        fwrite(STDOUT, "‚úÖ Th√†nh c√¥ng: {$passedTestCases}\n");
        fwrite(STDOUT, "‚ùå Th·∫•t b·∫°i: {$failedTestCases}\n");
        fwrite(STDOUT, "‚è±Ô∏è Th·ªùi gian th·ª±c thi: {$executionTime}s\n");

        if ($failedTestCases > 0) {
            fwrite(STDOUT, "\nüîç CHI TI·∫æT C√ÅC TEST CASE TH·∫§T B·∫†I:\n");
            fwrite(STDOUT, str_repeat("-", 50) . "\n");

            foreach ($testResults as $group => $result) {
                if (!$result['success']) {
                    fwrite(STDOUT, "‚ùå {$group}\n");

                    foreach ($result['results'] as $subResult) {
                        if (!$subResult['success']) {
                            fwrite(STDOUT, "   K·∫øt qu·∫£: {$subResult['actual']}\n");
                            if ($subResult['error']) {
                                fwrite(STDOUT, "   L·ªói: {$subResult['error']}\n");
                            }
                        }
                    }

                    fwrite(STDOUT, "\n");
                }
            }
        }

        fwrite(STDOUT, str_repeat("=", 50) . "\n");
    }
}
