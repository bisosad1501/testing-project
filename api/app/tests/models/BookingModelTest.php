<?php
/**
 * L·ªõp ki·ªÉm th·ª≠ BookingModel
 * 
 * File: api/app/tests/models/BookingModelTest.php
 * Class: BookingModelTest
 * 
 * M√¥ t·∫£: Ki·ªÉm th·ª≠ ƒë·∫ßy ƒë·ªß c√°c ch·ª©c nƒÉng c·ªßa l·ªõp BookingModel, bao g·ªìm:
 * - C√°c thao t√°c CRUD (T·∫°o, ƒê·ªçc, C·∫≠p nh·∫≠t, X√≥a)
 * - Ki·ªÉm tra c√°c ph∆∞∆°ng th·ª©c ƒë·ªçc th√¥ng tin theo ID
 * - Ki·ªÉm tra t√≠nh nh·∫•t qu√°n c·ªßa d·ªØ li·ªáu trong DB
 * 
 * @package    UnitTest
 * @subpackage Models
 * @author     B21DCDT205-L√™ ƒê·ª©c Th·∫Øng
 * @version    1.0
 */
require_once __DIR__ . '/../DatabaseTestCase.php';

class BookingModelTest extends DatabaseTestCase 
{
    /**
     * @var BookingModel ƒê·ªëi t∆∞·ª£ng model ƒë·∫∑t l·ªãch d√πng trong test
     */
    protected $bookingModel;
    
    /**
     * @var array L∆∞u tr·ªØ k·∫øt qu·∫£ c·ªßa t·∫•t c·∫£ c√°c test
     */
    protected static $allTestResults = [];
    
    /**
     * @var string Nh√≥m test hi·ªán t·∫°i
     */
    protected $currentGroup;
    
    /**
     * @var float Th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu test
     */
    protected static $startTime;
    
    /**
     * @var string T√™n ng∆∞·ªùi d√πng hi·ªán t·∫°i
     */
    const CURRENT_USER = 'bisosad1501';
    
    /**
     * @var int ID c·ªßa ƒë·∫∑t l·ªãch ƒë∆∞·ª£c t·∫°o ƒë·ªÉ s·ª≠ d·ª•ng chung cho c√°c test
     */
    protected static $testBookingId;

    /**
     * @var array D·ªØ li·ªáu ƒë·∫∑t l·ªãch m·∫´u ƒë∆∞·ª£c t·∫°o
     */
    protected static $testBookingData;
    
    /**
     * @var bool Ki·ªÉm so√°t vi·ªác b·∫Øt ƒë·∫ßu/k·∫øt th√∫c transaction
     */
    protected $useTransaction = true;

    /**
     * Thi·∫øt l·∫≠p tr∆∞·ªõc m·ªói test case
     * Kh·ªüi t·∫°o BookingModel v√† ghi l·∫°i th·ªùi gian b·∫Øt ƒë·∫ßu
     */
    protected function setUp()
    {
        parent::setUp();
        require_once APP_PATH . '/models/BookingModel.php';
        $this->bookingModel = new BookingModel();
        
        if (!isset(self::$startTime)) {
            self::$startTime = microtime(true);
        }
    }

    /**
     * Ghi log ti√™u ƒë·ªÅ ph·∫ßn test
     * 
     * @param string $title Ti√™u ƒë·ªÅ ph·∫ßn test
     */
    private function logSection($title) 
    {
        $this->currentGroup = $title;
        fwrite(STDOUT, "\n" . str_repeat("=", 50) . "\n");
        fwrite(STDOUT, "üîç {$title}\n");
        fwrite(STDOUT, str_repeat("=", 50) . "\n");
    }

    /**
     * Ghi log b∆∞·ªõc test
     * 
     * @param string $description M√¥ t·∫£ b∆∞·ªõc test
     * @param string|null $expected K·∫øt qu·∫£ mong ƒë·ª£i
     */
    private function logStep($description, $expected = null)
    {
        fwrite(STDOUT, "\nüìã {$description}\n");
        if ($expected) {
            fwrite(STDOUT, "  Expected: {$expected}\n");
        }
    }

    /**
     * Ghi log k·∫øt qu·∫£ test
     * 
     * @param bool $success K·∫øt qu·∫£ test (true/false)
     * @param string $actual K·∫øt qu·∫£ th·ª±c t·∫ø
     * @param string|null $error Th√¥ng b√°o l·ªói (n·∫øu c√≥)
     */
    private function logResult($success, $actual, $error = null) 
    {
        self::$allTestResults[] = [
            'group' => $this->currentGroup,
            'success' => $success,
            'actual' => $actual,
            'error' => $error
        ];

        $icon = $success ? "‚úÖ" : "‚ùå";
        $status = $success ? "SUCCESS" : "FAILED";
        
        fwrite(STDOUT, "  Result: {$actual}\n");
        fwrite(STDOUT, "  Status: {$icon} {$status}" . 
            ($error ? " - {$error}" : "") . "\n");
    }

    /**
     * T·∫°o d·ªØ li·ªáu ƒë·∫∑t l·ªãch m·∫´u cho test
     * 
     * @param array $override D·ªØ li·ªáu ghi ƒë√®
     * @return array D·ªØ li·ªáu ƒë·∫∑t l·ªãch m·∫´u
     */
    private function createTestBooking($override = [])
    {
        $currentDate = date('Y-m-d');
        $currentDatetime = date('Y-m-d H:i:s');

        return array_merge([
            'doctor_id' => 1, // ID m·∫∑c ƒë·ªãnh
            'patient_id' => 1, // ID m·∫∑c ƒë·ªãnh
            'service_id' => 1, // ID m·∫∑c ƒë·ªãnh
            'booking_name' => 'Test Booking ' . substr(time(), -5),
            'booking_phone' => '098' . rand(1000000, 9999999),
            'name' => 'Test Patient ' . substr(time(), -5),
            'gender' => rand(0, 1),
            'birthday' => '1990-01-01',
            'address' => 'Test Address ' . rand(100, 999),
            'reason' => 'Test Reason ' . rand(100, 999),
            'appointment_date' => $currentDate,
            'appointment_time' => '10:00',
            'status' => 'pending',
            'create_at' => $currentDatetime,
            'update_at' => $currentDatetime
        ], $override);
    }
    
    /**
     * Th·ª±c thi SQL tr·ª±c ti·∫øp v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
     * 
     * @param string $sql C√¢u l·ªánh SQL
     * @return array K·∫øt qu·∫£ truy v·∫•n
     */
    private function executeSQL($sql)
    {
        $stmt = $this->pdo->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * Test ƒë·∫ßy ƒë·ªß CRUD cho BookingModel
     * 
     * M√£ test case: BOOK_INS_01, BOOK_READ_02, BOOK_UPD_03, BOOK_DEL_04
     * M·ª•c ti√™u: Ki·ªÉm tra c·∫£ quy tr√¨nh CRUD trong m·ªôt test
     * Input: D·ªØ li·ªáu ƒë·∫∑t l·ªãch m·∫´u
     * Expected output: Thao t√°c CRUD th√†nh c√¥ng
     * Ghi ch√∫: Th·ª±c hi·ªán ki·ªÉm tra DB sau m·ªói thao t√°c ƒë·ªÉ x√°c nh·∫≠n d·ªØ li·ªáu nh·∫•t qu√°n
     */
    public function testCRUD()
    {
        $this->logSection("BOOK: Ki·ªÉm tra quy tr√¨nh CRUD");
        
        // ID v√† d·ªØ li·ªáu c·ªßa ƒë·∫∑t l·ªãch ƒë·ªÉ s·ª≠ d·ª•ng qua c√°c b∆∞·ªõc
        $bookingId = null;
        $bookingData = null;
        
        try {
            // B∆Ø·ªöC 1: CREATE - TC-BM-01
            $this->logStep("BOOK_INS_01: T·∫°o m·ªõi ƒë·∫∑t l·ªãch", "ƒê·∫∑t l·ªãch ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v·ªõi ID > 0");
            
            // T·∫°o d·ªØ li·ªáu ki·ªÉm th·ª≠
            $data = $this->createTestBooking();
            $bookingData = $data;
            
            // Set d·ªØ li·ªáu v√†o model
            foreach ($data as $field => $value) {
                $this->bookingModel->set($field, $value);
            }
            
            // Th·ª±c hi·ªán insert v√† ki·ªÉm tra
            $bookingId = $this->bookingModel->insert();
            $createSuccess = $bookingId > 0;
            
            $this->logResult($createSuccess, 
                "Booking ID: " . ($createSuccess ? $bookingId : "Kh√¥ng t·∫°o ƒë∆∞·ª£c"),
                $createSuccess ? null : "Kh√¥ng th·ªÉ t·∫°o ƒë·∫∑t l·ªãch m·ªõi");
            
            $this->assertTrue($createSuccess, "Kh√¥ng th·ªÉ t·∫°o ƒë·∫∑t l·ªãch m·ªõi");
            
            // Ki·ªÉm tra d·ªØ li·ªáu trong DB
            $this->assertRecordExists(TABLE_PREFIX.TABLE_BOOKINGS, ['id' => $bookingId]);
            
            // L∆∞u l·∫°i ID ƒë·ªÉ s·ª≠ d·ª•ng trong c√°c test sau
            self::$testBookingId = $bookingId;
            self::$testBookingData = $data;
            
            // B∆Ø·ªöC 2: READ - TC-BM-02
            $this->logStep("BOOK_READ_02: ƒê·ªçc th√¥ng tin ƒë·∫∑t l·ªãch theo ID", 
                "ƒê·∫∑t l·ªãch ƒë∆∞·ª£c t√¨m th·∫•y v√† c√≥ d·ªØ li·ªáu ƒë√∫ng");
            
            // T·∫°o model m·ªõi v√† select theo ID
            $readModel = new BookingModel($bookingId);
            $readSuccess = $readModel->isAvailable();
            
            // Ki·ªÉm tra th√¥ng tin ƒë·ªçc v·ªÅ
            $dataMatches = true;
            $mismatchFields = [];
            
            foreach ($data as $field => $value) {
                if ($readModel->get($field) != $value) {
                    $dataMatches = false;
                    $mismatchFields[] = $field;
                }
            }
            
            $readResult = "ID: {$bookingId} - T√¨m th·∫•y: " . ($readSuccess ? "C√≥" : "Kh√¥ng");
            $readResult .= $dataMatches ? ", D·ªØ li·ªáu kh·ªõp" : ", D·ªØ li·ªáu kh√¥ng kh·ªõp ·ªü c√°c tr∆∞·ªùng: " . implode(", ", $mismatchFields);
            
            $this->logResult($readSuccess && $dataMatches, $readResult);
            
            $this->assertTrue($readSuccess, "Kh√¥ng th·ªÉ ƒë·ªçc th√¥ng tin ƒë·∫∑t l·ªãch v·ªõi ID {$bookingId}");
            $this->assertTrue($dataMatches, "D·ªØ li·ªáu kh√¥ng kh·ªõp");
            
            // B∆Ø·ªöC 3: UPDATE - TC-BM-03
            $this->logStep("BOOK_UPD_03: C·∫≠p nh·∫≠t th√¥ng tin ƒë·∫∑t l·ªãch", 
                "ƒê·∫∑t l·ªãch ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng");
            
            // C·∫≠p nh·∫≠t d·ªØ li·ªáu
            $updateData = [
                'booking_name' => 'Updated Booking ' . substr(time(), -5),
                'status' => 'confirmed',
                'appointment_time' => '11:30',
                'update_at' => date('Y-m-d H:i:s')
            ];
            
            // √Åp d·ª•ng d·ªØ li·ªáu m·ªõi v√†o model
            foreach ($updateData as $field => $value) {
                $readModel->set($field, $value);
            }
            
            // Th·ª±c hi·ªán update
            $readModel->update();
            
            // Ki·ªÉm tra d·ªØ li·ªáu sau khi update
            $updatedModel = new BookingModel($bookingId);
            $updateSuccess = $updatedModel->isAvailable();
            
            // Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
            $updateMatches = true;
            $updateMismatchFields = [];
            
            foreach ($updateData as $field => $value) {
                if ($updatedModel->get($field) != $value) {
                    $updateMatches = false;
                    $updateMismatchFields[] = $field;
                }
            }
            
            $updateResult = "C·∫≠p nh·∫≠t " . ($updateSuccess ? "th√†nh c√¥ng" : "th·∫•t b·∫°i");
            $updateResult .= $updateMatches ? ", D·ªØ li·ªáu kh·ªõp" : ", D·ªØ li·ªáu kh√¥ng kh·ªõp ·ªü c√°c tr∆∞·ªùng: " . implode(", ", $updateMismatchFields);
            
            $this->logResult($updateSuccess && $updateMatches, $updateResult);
            
            $this->assertTrue($updateSuccess, "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin ƒë·∫∑t l·ªãch");
            $this->assertTrue($updateMatches, "D·ªØ li·ªáu sau khi c·∫≠p nh·∫≠t kh√¥ng kh·ªõp");
            
            // B∆Ø·ªöC 4: DELETE - TC-BM-04
            $this->logStep("BOOK_DEL_04: X√≥a ƒë·∫∑t l·ªãch", "ƒê·∫∑t l·ªãch ƒë∆∞·ª£c x√≥a th√†nh c√¥ng");
            
            // Th·ª±c hi·ªán x√≥a
            $deleteSuccess = $updatedModel->delete();
            
            // Ki·ªÉm tra ƒë·∫∑t l·ªãch ƒë√£ b·ªã x√≥a
            $deletedModel = new BookingModel($bookingId);
            $deleteVerify = !$deletedModel->isAvailable();
            
            // Ki·ªÉm tra d·ªØ li·ªáu trong DB
            $recordExists = false;
            try {
                $this->assertRecordNotExists(TABLE_PREFIX.TABLE_BOOKINGS, ['id' => $bookingId]);
                $recordExists = false;
            } catch (ExpectationFailedException $e) {
                $recordExists = true;
            }
            
            $deleteResult = "X√≥a " . ($deleteSuccess ? "th√†nh c√¥ng" : "th·∫•t b·∫°i");
            $deleteResult .= ", Ki·ªÉm tra t·ªìn t·∫°i: " . ($deleteVerify ? "ƒê√£ x√≥a" : "V·∫´n t·ªìn t·∫°i");
            $deleteResult .= ", Ki·ªÉm tra DB: " . ($recordExists ? "V·∫´n t·ªìn t·∫°i trong DB" : "ƒê√£ x√≥a kh·ªèi DB");
            
            $this->logResult($deleteSuccess && $deleteVerify && !$recordExists, $deleteResult);
            
            $this->assertTrue($deleteSuccess, "Kh√¥ng th·ªÉ x√≥a ƒë·∫∑t l·ªãch");
            $this->assertTrue($deleteVerify, "ƒê·∫∑t l·ªãch v·∫´n t·ªìn t·∫°i sau khi x√≥a");
            $this->assertRecordNotExists(TABLE_PREFIX.TABLE_BOOKINGS, ['id' => $bookingId], "ƒê·∫∑t l·ªãch v·∫´n t·ªìn t·∫°i trong DB");
            
        } catch (Exception $e) {
            $this->logResult(false, "L·ªói: " . $e->getMessage());
            $this->fail("Test CRUD th·∫•t b·∫°i: " . $e->getMessage());
        }
    }

    /**
     * Test select v·ªõi ID kh√¥ng t·ªìn t·∫°i
     * 
     * M√£ test case: BOOK_ERR_ID_05
     * M·ª•c ti√™u: Ki·ªÉm tra tr∆∞·ªùng h·ª£p t√¨m ki·∫øm v·ªõi ID kh√¥ng t·ªìn t·∫°i
     * Input: ID kh√¥ng t·ªìn t·∫°i
     * Expected output: Model kh√¥ng kh·∫£ d·ª•ng (isAvailable() = false)
     */
    public function testSelectWithNonExistentId()
    {
        $this->logSection("BOOK_ERR_ID_05: Ki·ªÉm tra select v·ªõi ID kh√¥ng t·ªìn t·∫°i");
        
        try {
            $this->logStep("T√¨m ki·∫øm ƒë·∫∑t l·ªãch v·ªõi ID kh√¥ng t·ªìn t·∫°i", 
                "ƒê·∫∑t l·ªãch kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y");
            
            // T·∫°o ID kh√¥ng t·ªìn t·∫°i b·∫±ng c√°ch l·∫•y max ID hi·ªán t·∫°i + 1000
            $sql = "SELECT MAX(id) as max_id FROM " . TABLE_PREFIX . TABLE_BOOKINGS;
            $result = $this->executeSQL($sql);
            $nonExistentId = $result[0]['max_id'] + 1000;
            
            // Th·ª±c hi·ªán t√¨m ki·∫øm
            $model = new BookingModel($nonExistentId);
            $isAvailable = $model->isAvailable();
            
            $selectResult = "ID kh√¥ng t·ªìn t·∫°i: {$nonExistentId}, K·∫øt qu·∫£: " . 
                ($isAvailable ? "T√¨m th·∫•y (kh√¥ng ƒë√∫ng)" : "Kh√¥ng t√¨m th·∫•y (ƒë√∫ng)");
            
            $this->logResult(!$isAvailable, $selectResult);
            $this->assertFalse($isAvailable, "Model v·∫´n kh·∫£ d·ª•ng khi ID kh√¥ng t·ªìn t·∫°i");
            
        } catch (Exception $e) {
            $this->logResult(false, "L·ªói: " . $e->getMessage());
            $this->fail("Test select v·ªõi ID kh√¥ng t·ªìn t·∫°i th·∫•t b·∫°i: " . $e->getMessage());
        }
    }

    /**
     * Test ch·ª©c nƒÉng extendDefaults
     * 
     * M√£ test case: BOOK_DEF_06
     * M·ª•c ti√™u: Ki·ªÉm tra ph∆∞∆°ng th·ª©c extendDefaults thi·∫øt l·∫≠p gi√° tr·ªã m·∫∑c ƒë·ªãnh ƒë√∫ng
     * Input: Model kh√¥ng c√≥ d·ªØ li·ªáu
     * Expected output: C√°c tr∆∞·ªùng ƒë∆∞·ª£c thi·∫øt l·∫≠p gi√° tr·ªã m·∫∑c ƒë·ªãnh
     */
    public function testExtendDefaults()
    {
        $this->logSection("BOOK_DEF_06: Ki·ªÉm tra ph∆∞∆°ng th·ª©c extendDefaults");
        
        try {
            $this->logStep("Ki·ªÉm tra gi√° tr·ªã m·∫∑c ƒë·ªãnh sau khi g·ªçi extendDefaults", 
                "C√°c tr∆∞·ªùng ƒë∆∞·ª£c thi·∫øt l·∫≠p ƒë√∫ng gi√° tr·ªã m·∫∑c ƒë·ªãnh");
            
            // T·∫°o model m·ªõi kh√¥ng c√≥ d·ªØ li·ªáu
            $model = new BookingModel();
            $this->assertFalse($model->isAvailable(), "Model m·ªõi kh√¥ng n√™n kh·∫£ d·ª•ng");
            
            // G·ªçi extendDefaults
            $model->extendDefaults();
            
            // Ki·ªÉm tra c√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh
            $expectedDefaults = [
                'doctor_id' => '',
                'patient_id' => '',
                'service_id' => '',
                'booking_name' => '',
                'booking_phone' => '',
                'name' => '',
                'gender' => '',
                'birthday' => '',
                'address' => '',
                'reason' => '',
                'appointment_date' => '',
                'appointment_time' => '',
                'status' => '',
                'create_at' => '',
                'update_at' => ''
            ];
            
            $defaultsMatch = true;
            $mismatchFields = [];
            
            foreach ($expectedDefaults as $field => $expectedValue) {
                $actualValue = $model->get($field);
                if ($actualValue !== $expectedValue) {
                    $defaultsMatch = false;
                    $mismatchFields[] = "{$field} (mong ƒë·ª£i: '{$expectedValue}', th·ª±c t·∫ø: '{$actualValue}')";
                }
            }
            
            $result = $defaultsMatch 
                ? "T·∫•t c·∫£ gi√° tr·ªã m·∫∑c ƒë·ªãnh ƒë·ªÅu ƒë√∫ng" 
                : "C√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh kh√¥ng ƒë√∫ng: " . implode(", ", $mismatchFields);
            
            $this->logResult($defaultsMatch, $result);
            $this->assertTrue($defaultsMatch, "Gi√° tr·ªã m·∫∑c ƒë·ªãnh kh√¥ng ƒë√∫ng");
            
        } catch (Exception $e) {
            $this->logResult(false, "L·ªói: " . $e->getMessage());
            $this->fail("Test extendDefaults th·∫•t b·∫°i: " . $e->getMessage());
        }
    }

    /**
     * Test update khi ƒë·∫∑t l·ªãch kh√¥ng t·ªìn t·∫°i
     * 
     * M√£ test case: BOOK_ERR_UPD_07
     * M·ª•c ti√™u: Ki·ªÉm tra k·∫øt qu·∫£ khi c·∫≠p nh·∫≠t ƒë·∫∑t l·ªãch kh√¥ng t·ªìn t·∫°i
     * Input: Model ƒë·∫∑t l·ªãch kh√¥ng t·ªìn t·∫°i
     * Expected output: H√†m update tr·∫£ v·ªÅ false
     */
    public function testUpdateNonExistentBooking()
    {
        $this->logSection("BOOK_ERR_UPD_07: Ki·ªÉm tra update ƒë·∫∑t l·ªãch kh√¥ng t·ªìn t·∫°i");
        
        try {
            $this->logStep("C·∫≠p nh·∫≠t th√¥ng tin ƒë·∫∑t l·ªãch kh√¥ng t·ªìn t·∫°i", 
                "H√†m update tr·∫£ v·ªÅ false");
            
            // T·∫°o model kh√¥ng kh·∫£ d·ª•ng
            $model = new BookingModel();
            $this->assertFalse($model->isAvailable(), "Model m·ªõi kh√¥ng n√™n kh·∫£ d·ª•ng");
            
            // Thi·∫øt l·∫≠p d·ªØ li·ªáu
            $updateData = $this->createTestBooking();
            foreach ($updateData as $field => $value) {
                $model->set($field, $value);
            }
            
            // Th·ª±c hi·ªán update
            $updateResult = $model->update();
            
            $result = "Update ƒë·∫∑t l·ªãch kh√¥ng t·ªìn t·∫°i tr·∫£ v·ªÅ: " . 
                ($updateResult === false ? "false (ƒë√∫ng)" : "kh√¥ng ph·∫£i false (kh√¥ng ƒë√∫ng)");
            
            $this->logResult($updateResult === false, $result);
            $this->assertFalse($updateResult, "Update ƒë·∫∑t l·ªãch kh√¥ng t·ªìn t·∫°i ph·∫£i tr·∫£ v·ªÅ false");
            
        } catch (Exception $e) {
            $this->logResult(false, "L·ªói: " . $e->getMessage());
            $this->fail("Test update ƒë·∫∑t l·ªãch kh√¥ng t·ªìn t·∫°i th·∫•t b·∫°i: " . $e->getMessage());
        }
    }

    /**
     * Test delete khi ƒë·∫∑t l·ªãch kh√¥ng t·ªìn t·∫°i
     * 
     * M√£ test case: BOOK_ERR_DEL_08
     * M·ª•c ti√™u: Ki·ªÉm tra k·∫øt qu·∫£ khi x√≥a ƒë·∫∑t l·ªãch kh√¥ng t·ªìn t·∫°i
     * Input: Model ƒë·∫∑t l·ªãch kh√¥ng t·ªìn t·∫°i
     * Expected output: H√†m delete tr·∫£ v·ªÅ false
     */
    public function testDeleteNonExistentBooking()
    {
        $this->logSection("BOOK_ERR_DEL_08: Ki·ªÉm tra delete ƒë·∫∑t l·ªãch kh√¥ng t·ªìn t·∫°i");
        
        try {
            $this->logStep("X√≥a ƒë·∫∑t l·ªãch kh√¥ng t·ªìn t·∫°i", 
                "H√†m delete tr·∫£ v·ªÅ false");
            
            // T·∫°o model kh√¥ng kh·∫£ d·ª•ng
            $model = new BookingModel();
            $this->assertFalse($model->isAvailable(), "Model m·ªõi kh√¥ng n√™n kh·∫£ d·ª•ng");
            
            // Th·ª±c hi·ªán delete
            $deleteResult = $model->delete();
            
            $result = "Delete ƒë·∫∑t l·ªãch kh√¥ng t·ªìn t·∫°i tr·∫£ v·ªÅ: " . 
                ($deleteResult === false ? "false (ƒë√∫ng)" : "kh√¥ng ph·∫£i false (kh√¥ng ƒë√∫ng)");
            
            $this->logResult($deleteResult === false, $result);
            $this->assertFalse($deleteResult, "Delete ƒë·∫∑t l·ªãch kh√¥ng t·ªìn t·∫°i ph·∫£i tr·∫£ v·ªÅ false");
            
        } catch (Exception $e) {
            $this->logResult(false, "L·ªói: " . $e->getMessage());
            $this->fail("Test delete ƒë·∫∑t l·ªãch kh√¥ng t·ªìn t·∫°i th·∫•t b·∫°i: " . $e->getMessage());
        }
    }

    /**
     * Test insert khi model ƒë√£ c√≥ s·∫µn
     * 
     * M√£ test case: BOOK_DUP_09
     * M·ª•c ti√™u: Ki·ªÉm tra k·∫øt qu·∫£ khi insert tr√™n model ƒë√£ kh·∫£ d·ª•ng
     * Input: Model ƒë·∫∑t l·ªãch ƒë√£ kh·∫£ d·ª•ng
     * Expected output: H√†m insert tr·∫£ v·ªÅ false
     */
    public function testInsertExistingBooking()
    {
        $this->logSection("BOOK_DUP_09: Ki·ªÉm tra insert ƒë·∫∑t l·ªãch ƒë√£ t·ªìn t·∫°i");
        
        try {
            // T·∫°o ƒë·∫∑t l·ªãch m·∫´u
            $data = $this->createTestBooking();
            foreach ($data as $field => $value) {
                $this->bookingModel->set($field, $value);
            }
            
            $bookingId = $this->bookingModel->insert();
            $this->assertGreaterThan(0, $bookingId, "Kh√¥ng th·ªÉ t·∫°o ƒë·∫∑t l·ªãch ban ƒë·∫ßu");
            
            $this->logStep("Th·ª±c hi·ªán insert tr√™n model ƒë√£ kh·∫£ d·ª•ng", 
                "H√†m insert tr·∫£ v·ªÅ false");
            
            // Th·ª±c hi·ªán insert l·∫ßn th·ª© hai
            $secondInsertResult = $this->bookingModel->insert();
            
            $result = "Insert ƒë·∫∑t l·ªãch ƒë√£ t·ªìn t·∫°i tr·∫£ v·ªÅ: " . 
                ($secondInsertResult === false ? "false (ƒë√∫ng)" : "kh√¥ng ph·∫£i false (kh√¥ng ƒë√∫ng)");
            
            $this->logResult($secondInsertResult === false, $result);
            $this->assertFalse($secondInsertResult, "Insert ƒë·∫∑t l·ªãch ƒë√£ t·ªìn t·∫°i ph·∫£i tr·∫£ v·ªÅ false");
            
            // D·ªçn d·∫πp
            $this->bookingModel->delete();
            
        } catch (Exception $e) {
            $this->logResult(false, "L·ªói: " . $e->getMessage());
            $this->fail("Test insert ƒë·∫∑t l·ªãch ƒë√£ t·ªìn t·∫°i th·∫•t b·∫°i: " . $e->getMessage());
        }
    }

    /**
     * D·ªçn d·∫πp sau khi t·∫•t c·∫£ c√°c test ho√†n th√†nh
     */
    protected function tearDown()
    {
        // G·ªçi tear down c·ªßa cha ƒë·ªÉ th·ª±c hi·ªán rollback
        if ($this->useTransaction) {
            parent::tearDown();
        }
        
        // In k·∫øt qu·∫£ t·ªïng quan ·ªü test cu·ªëi c√πng
        $this->printFinalSummary();
    }
    
    /**
     * In k·∫øt qu·∫£ t·ªïng h·ª£p to√†n b·ªô test
     */
    private function printFinalSummary()
    {
        // Ch·ªâ in t·ªïng k·∫øt n·∫øu ƒë√¢y l√† l·∫ßn g·ªçi tearDown cu·ªëi c√πng
        $bt = debug_backtrace();
        $caller = isset($bt[2]['function']) ? $bt[2]['function'] : '';
        if ($caller != '__call') {
            return;
        }
        
        // ƒê·∫øm s·ªë l∆∞·ª£ng test th√†nh c√¥ng v√† th·∫•t b·∫°i
        $total = count(self::$allTestResults);
        $success = 0;
        $failed = 0;
        
        foreach (self::$allTestResults as $result) {
            if ($result['success']) {
                $success++;
            } else {
                $failed++;
            }
        }
        
        // T√≠nh th·ªùi gian th·ª±c thi
        $executionTime = microtime(true) - self::$startTime;
        
        // In t·ªïng k·∫øt
        fwrite(STDOUT, "\n" . str_repeat("=", 70) . "\n");
        fwrite(STDOUT, "üìä K·∫æT QU·∫¢ TEST BOOKINGMODEL \n");
        fwrite(STDOUT, str_repeat("=", 70) . "\n");
        fwrite(STDOUT, sprintf("‚úÖ Th√†nh c√¥ng: %d/%d (%.2f%%)\n", 
            $success, $total, ($total > 0 ? ($success / $total * 100) : 0)));
        fwrite(STDOUT, sprintf("‚ùå Th·∫•t b·∫°i: %d/%d (%.2f%%)\n", 
            $failed, $total, ($total > 0 ? ($failed / $total * 100) : 0)));
        fwrite(STDOUT, sprintf("‚è± Th·ªùi gian th·ª±c thi: %.4f gi√¢y\n", $executionTime));
        fwrite(STDOUT, "üë§ Ng∆∞·ªùi th·ª±c hi·ªán: " . self::CURRENT_USER . "\n");
        fwrite(STDOUT, "üìÖ Th·ªùi gian: " . date('Y-m-d H:i:s') . "\n");
        fwrite(STDOUT, str_repeat("=", 70) . "\n");
        
        // Reset l·∫°i bi·∫øn static ƒë·ªÉ test ti·∫øp theo s·∫°ch
        self::$allTestResults = [];
        self::$startTime = null;
    }
} 